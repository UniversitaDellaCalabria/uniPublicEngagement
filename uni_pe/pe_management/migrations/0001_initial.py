# Generated by Django 5.2 on 2025-04-30 09:34

import django.db.models.deletion
import pe_management.models
import pe_management.validators
import template.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('organizational_area', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PublicEngagementAnnualMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('year', models.IntegerField(choices=[('', '')], unique=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Anno di monitoraggio',
                'verbose_name_plural': 'Anni di monitoraggio',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(default='', max_length=300, verbose_name='Event title')),
                ('start', models.DateTimeField(verbose_name='Start')),
                ('end', models.DateTimeField(verbose_name='End')),
                ('to_evaluate', models.BooleanField(default=False, verbose_name='Richiesta di validazione')),
                ('evaluation_request_date', models.DateTimeField(blank=True, null=True, verbose_name='Data richiesta di validazione')),
                ('operator_taken_date', models.DateTimeField(blank=True, null=True, verbose_name='Data presa in carico operatore')),
                ('operator_evaluation_date', models.DateTimeField(blank=True, null=True, verbose_name='Data validazione operatore')),
                ('operator_evaluation_success', models.BooleanField(default=False, verbose_name='Validazione operatore positiva')),
                ('operator_notes', models.TextField(blank=True, default='', verbose_name='Note validazione operatore')),
                ('patronage_operator_taken_date', models.DateTimeField(blank=True, null=True, verbose_name='Data presa in carico operatore patrocinio')),
                ('patronage_granted', models.BooleanField(default=False, verbose_name='Patrocinio concesso')),
                ('patronage_granted_date', models.DateTimeField(blank=True, null=True, verbose_name='Data validazione richiesta patrocinio')),
                ('patronage_granted_notes', models.TextField(blank=True, default='', verbose_name='Note concessione patrocinio')),
                ('created_by_manager', models.BooleanField(default=False, verbose_name='Creato dal manager')),
                ('edited_by_manager', models.BooleanField(default=False, verbose_name='Modificato dal manager')),
                ('disabled_notes', models.TextField(blank=True, default='', verbose_name='Note disabilitazione')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('evaluation_request_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='evaluation_request_by', to=settings.AUTH_USER_MODEL, verbose_name='Validazione richiesta da')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
                ('operator_evaluated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='operator_evaluated_by', to=settings.AUTH_USER_MODEL, verbose_name='Validazione eseguita da operatore')),
                ('operator_taken_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='operator_taken_by', to=settings.AUTH_USER_MODEL, verbose_name='Presa in carico da operatore')),
                ('patronage_granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='patronage_granted_by', to=settings.AUTH_USER_MODEL, verbose_name='Validazione patrocinio eseguita da operatore')),
                ('patronage_operator_taken_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='patronage_taken_by', to=settings.AUTH_USER_MODEL, verbose_name='Presa in carico da operatore patrocinio')),
                ('referent', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_referent', to=settings.AUTH_USER_MODEL, verbose_name='Referent')),
                ('structure', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.PROTECT, to='organizational_area.organizationalstructure', verbose_name='Structure')),
            ],
            options={
                'verbose_name': 'Iniziativa di Public Engagement',
                'verbose_name_plural': 'Iniziative di Public Engagement',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventCollaboratorType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tipo di collaboratore',
                'verbose_name_plural': 'Tipi di collaboratore',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventMethodOfExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Modalit√† di svolgimento',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventPromoChannel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('is_global', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Canale di promozione',
                'verbose_name_plural': 'Canali di promozione',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventPromoChannelContact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
                ('promo_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pe_management.publicengagementeventpromochannel', verbose_name='Contact')),
                ('structure', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='organizational_area.organizationalstructure', verbose_name='Structure')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventPromoTool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Strumento di promozione',
                'verbose_name_plural': 'Strumenti di promozione',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': "Destinatario dell'iniziativa",
                'verbose_name_plural': 'Destinatari delle iniziative',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventScientificArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Area scientifica',
                'verbose_name_plural': 'Aree scientifica',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('participants', models.IntegerField(verbose_name='Non-academic audience participating in the initiative or reached via web/social resources, or outreach publications')),
                ('budget', models.FloatField(verbose_name='Total budget (in Euro)')),
                ('monitoring_activity', models.BooleanField(default=False, verbose_name='Is the initiative accompanied by monitoring activities (e.g., collection of information on activities, attendance, satisfaction, etc.)?')),
                ('impact_evaluation', models.BooleanField(default=False, verbose_name='Is the initiative accompanied by an impact evaluation plan?')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Initiative‚Äôs website')),
                ('notes', models.TextField(blank=True, default='', verbose_name='Notes')),
                ('edited_by_manager', models.BooleanField(default=False, verbose_name='Modificato dal manager')),
                ('collaborator_type', models.ManyToManyField(blank=True, limit_choices_to={'is_active': True}, to='pe_management.publicengagementeventcollaboratortype', verbose_name='Which collaborators were involved in organizing/managing the initiative?')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='report', to='pe_management.publicengagementevent')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
                ('scientific_area', models.ManyToManyField(to='pe_management.publicengagementeventscientificarea', verbose_name='Scientific areas')),
            ],
            options={
                'verbose_name': 'Event monitoring',
                'verbose_name_plural': 'Event monitoring records',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=254)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Obiettivo iniziative',
                'verbose_name_plural': 'Obiettivi iniziative',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.CharField(max_length=500)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tipologia iniziativa',
                'verbose_name_plural': 'Tipologie iniziative',
            },
        ),
        migrations.CreateModel(
            name='PublicEngagementEventData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(help_text='This text will be used for any promotion on institutional channels. Max 1500 chars', max_length=1500, verbose_name='Short description')),
                ('other_recipients', models.CharField(blank=True, default='', max_length=254, verbose_name='Other recipients')),
                ('geographical_dimension', models.CharField(choices=[('Internazionale', 'International'), ('Nazionale', 'National'), ('Regionale', 'Regional'), ('Locale', 'Local')], default='', max_length=14, verbose_name='Geographical dimension')),
                ('organizing_subject', models.CharField(choices=[('UniCal', 'University of Calabria (University, Department, or other structure)'), ('Altra universit√†', 'Another university'), ('Altro ente pubblico', 'Another public entity'), ('Ente privato', 'Private entity')], default='', max_length=20, verbose_name='Main organizing entity of the initiative')),
                ('patronage_requested', models.BooleanField(default=False, verbose_name='Request for the patronage of the Department/Center for the initiative')),
                ('poster', models.FileField(blank=True, null=True, upload_to=pe_management.models._poster_directory_path, validators=[pe_management.validators.validate_poster_extension, template.validators.validate_file_size], verbose_name='Poster attached')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_by', to=settings.AUTH_USER_MODEL)),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='pe_management.publicengagementevent')),
                ('involved_personnel', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='Other UNICAL staff members involved in organizing/executing the initiative')),
                ('involved_structure', models.ManyToManyField(limit_choices_to={'is_active': True}, to='organizational_area.organizationalstructure', verbose_name='Other UNICAL structures involved in organizing/executing the initiative')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_modified_by', to=settings.AUTH_USER_MODEL)),
                ('project_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='pe_management.publicengagementevent', verbose_name='If the event is linked to a larger project, indicate which one')),
                ('method_of_execution', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.PROTECT, to='pe_management.publicengagementeventmethodofexecution', verbose_name='Execution method')),
                ('promo_channel', models.ManyToManyField(blank=True, limit_choices_to={'is_active': True}, to='pe_management.publicengagementeventpromochannel', verbose_name='Request for the initiative to be promoted through the following institutional communication channels')),
                ('promo_tool', models.ManyToManyField(blank=True, limit_choices_to={'is_active': True}, to='pe_management.publicengagementeventpromotool', verbose_name='Request to use the Department/Center‚Äôs name and/or logo in the following communication tools')),
                ('recipient', models.ManyToManyField(limit_choices_to={'is_active': True}, to='pe_management.publicengagementeventrecipient', verbose_name='Recipients')),
                ('target', models.ManyToManyField(blank=True, limit_choices_to={'is_active': True}, to='pe_management.publicengagementeventtarget', verbose_name='Sustainable Development Goals (SDGs)')),
                ('event_type', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, to='pe_management.publicengagementeventtype', verbose_name='Event type')),
            ],
            options={
                'verbose_name': 'Event data',
                'verbose_name_plural': 'Event data records',
            },
        ),
    ]
